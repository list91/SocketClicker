import { IAction, IActionResult, ActionType, IComplexCommand } from '../types';
import { WebInteractions } from './web_interactions';

// –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
export class ActionExecutor {
  private timeouts: { [key: string]: number };
  private variables: { [key: string]: any };
  private currentTabId: number | null = null;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ–º null
  private proxyPilotUrl: string = 'http://127.0.0.1:5000';

  constructor() {
    this.timeouts = {};
    this.variables = {};

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–± –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      if (tabs[0] && tabs[0].id) {
        this.currentTabId = tabs[0].id;
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–±–∞
  private async updateCurrentTab(): Promise<void> {
    return new Promise((resolve) => {
      chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        if (tabs[0] && tabs[0].id) {
          this.currentTabId = tabs[0].id;
        }
        resolve();
      });
    });
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ XPath —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  private async findElementByXpath(xpath: string): Promise<boolean> {
    if (!xpath) {
      console.error('‚ùå –ü—É—Å—Ç–æ–π XPath');
      return false;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–± –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
      await this.updateCurrentTab();

      const result = await chrome.scripting.executeScript({
        target: { tabId: this.currentTabId as number },
        func: (elementXpath: string) => {
          const element = document.evaluate(
            elementXpath, 
            document, 
            null, 
            XPathResult.FIRST_ORDERED_NODE_TYPE, 
            null
          ).singleNodeValue;

          return !!element;
        },
        args: [xpath]
      });

      return result[0]?.result || false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ XPath:', error);
      return false;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  public async execute(action: IAction): Promise<IActionResult> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!action.action) {
      return { 
        success: false, 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
      };
    }

    try {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (action.on_start) {
        await this.sleep(action.on_start);
      }

      switch (action.action) {
        case 'click':
          return await this.executeClick(action);
        case 'input':
          return await this.executeInput(action);
        case 'select':
          return await this.executeSelect(action);
        case 'checkbox':
          return await this.setCheckbox(action);
        case 'scroll':
          return await this.executeScroll(action);
        case 'get_text':
          return await this.executeGetText(action);
        case 'go':
          return await this.executeGo(action);
        default:
          return { 
            success: false, 
            error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${action.action}`,
            message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${action.action}`
          };
      }
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  public async executeComplexCommand(command: IComplexCommand): Promise<IActionResult[]> {
    if (!command || !command.params || !Array.isArray(command.params.data)) {
      return [{
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã'
      }];
    }

    const results: IActionResult[] = [];
    let retryCount = command.params.retry_count || 0;
    const retryDelay = command.params.retry_delay || 1000;

    while (retryCount >= 0) {
      try {
        for (const action of command.params.data) {
          const result = await this.execute(action);
          results.push(result);

          if (!result.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${result.error}`);
          }
        }
        break; // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
      } catch (error) {
        if (retryCount === 0) {
          results.push({
            success: false,
            error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É'
          });
          break;
        }
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await this.sleep(retryDelay);
        retryCount--;
      }
    }

    return results;
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π...
  private validateActionParameters(action: IAction): void {
    if (!action.action) {
      throw new Error('–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
    }

    switch (action.action) {
      case 'go':
        if (!action.value || typeof action.value !== 'string') {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL');
        }
        break;
      case 'click':
      case 'input':
      case 'get_text':
        if (!action.element_xpath || typeof action.element_xpath !== 'string') {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XPath');
        }
        if (action.action === 'input' && (!action.value || typeof action.value !== 'string')) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞');
        }
        break;
      case 'select':
      case 'checkbox':
      case 'scroll':
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${action.action}`)
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  private async executeClick(action: IAction): Promise<IActionResult> {
    console.log(`üñ±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–∞. XPath: ${action.element_xpath}`);

    if (!action.element_xpath) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç XPath –¥–ª—è –∫–ª–∏–∫–∞');
      return {
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç XPath',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω XPath —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞'
      };
    }

    try {
      const result = await chrome.scripting.executeScript({
        target: { tabId: this.currentTabId as number },
        func: (elementXpath: string) => {
          const element = document.evaluate(
            elementXpath, 
            document, 
            null, 
            XPathResult.FIRST_ORDERED_NODE_TYPE, 
            null
          ).singleNodeValue as HTMLElement;

          if (element) {
            console.log('üìç –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞');
            element.click();
            return true;
          }
          console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞');
          return false;
        },
        args: [action.element_xpath]
      });

      const clickResult = result[0]?.result;
      
      return {
        success: clickResult === true,
        message: clickResult === true 
          ? `–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å XPath: ${action.element_xpath}` 
          : '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫',
        data: {
          xpath: action.element_xpath,
          elementFound: clickResult === true
        }
      };
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∏–∫–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫'
      };
    }
  }

  private async executeInput(action: IAction): Promise<IActionResult> {
    console.log(`üîç –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è input. XPath: ${action.element_xpath}`);
    console.log(`üì• –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞: ${action.value}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è XPath
    if (!action.element_xpath) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç XPath —ç–ª–µ–º–µ–Ω—Ç–∞');
      return { 
        success: false, 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç XPath —ç–ª–µ–º–µ–Ω—Ç–∞', 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω XPath –¥–ª—è –≤–≤–æ–¥–∞' 
      };
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    const inputValue = action.value !== undefined 
      ? String(action.value) 
      : '';

    console.log(`üîé –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ XPath: ${action.element_xpath}`);
    const element = await this.findElementByXpath(action.element_xpath);
    
    if (!element) {
      console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ XPath: ${action.element_xpath}`);
      return { 
        success: false, 
        error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞' 
      };
    }

    console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ XPath: ${action.element_xpath}`);

    try {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
      const result = await chrome.scripting.executeScript({
        target: { tabId: this.currentTabId as number },
        func: (elementXpath: string, value: string) => {
          const element = document.evaluate(
            elementXpath, 
            document, 
            null, 
            XPathResult.FIRST_ORDERED_NODE_TYPE, 
            null
          ).singleNodeValue as HTMLInputElement;

          if (element) {
            console.log('üìù –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞');
            try {
              element.value = value;
              element.dispatchEvent(new Event('input', { bubbles: true }));
              element.dispatchEvent(new Event('change', { bubbles: true }));
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
              return true;
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è:', error);
              return false;
            }
          }
          console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞');
          return false;
        },
        args: [action.element_xpath, inputValue]
      });

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
      await this.sleep(100);

      const scriptResult = result[0]?.result;
      console.log(`üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–æ–¥–∞: ${scriptResult ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ'}`);

      return { 
        success: scriptResult === true, 
        message: scriptResult === true 
          ? `–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${inputValue}` 
          : '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ',
        data: {
          xpath: action.element_xpath,
          value: inputValue,
          elementFound: scriptResult === true
        }
      };
    } catch (error) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞',
        data: {
          xpath: action.element_xpath,
          value: inputValue,
          elementFound: false
        }
      };
    }
  }

  private async executeSelect(action: IAction): Promise<IActionResult> {
    const element = await this.findElementByXpath(action.element_xpath || '');
    if (!element) {
      return { 
        success: false, 
        error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞' 
      };
    }
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
    return { success: true, message: '–í—ã–±–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω' };
  }

  private async setCheckbox(action: IAction): Promise<IActionResult> {
    const element = await this.findElementByXpath(action.element_xpath || '');
    if (!element) {
      return { 
        success: false, 
        error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–µ–∫–±–æ–∫—Å' 
      };
    }
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–±–æ–∫—Å–æ–º
    return { success: true, message: '–ß–µ–∫–±–æ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' };
  }

  private async executeScroll(action: IAction): Promise<IActionResult> {
    console.log(`üìú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞. –ó–Ω–∞—á–µ–Ω–∏–µ: ${action.value}`);

    if (action.value === undefined) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞');
      return {
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞'
      };
    }

    try {
      const result = await chrome.scripting.executeScript({
        target: { tabId: this.currentTabId as number },
        func: (scrollValue: number) => {
          try {
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
            window.scrollBy(0, scrollValue);
            console.log(`üìç –°–∫—Ä–æ–ª–ª –Ω–∞ ${scrollValue} –ø–∏–∫—Å–µ–ª–µ–π`);
            return true;
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ:', error);
            return false;
          }
        },
        args: [Number(action.value)]
      });

      const scrollResult = result[0]?.result;
      
      return {
        success: scrollResult === true,
        message: scrollResult === true 
          ? `–°–∫—Ä–æ–ª–ª –Ω–∞ ${action.value} –ø–∏–∫—Å–µ–ª–µ–π` 
          : '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–æ–ª–ª',
        data: {
          scrollValue: action.value
        }
      };
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–æ–ª–ª–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–æ–ª–ª'
      };
    }
  }

  private async executeGetText(action: IAction): Promise<IActionResult> {
    const element = await this.findElementByXpath(action.element_xpath || '');
    if (!element) {
      return { 
        success: false, 
        error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞' 
      };
    }
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    return { success: true, message: '–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω' };
  }

  private async executeGo(action: IAction): Promise<IActionResult> {
    console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: ${action.value}`);

    if (!action.value || typeof action.value !== 'string') {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL');
      return {
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL'
      };
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (!tab || !tab.id) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É');
        return {
          success: false,
          error: '–í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞'
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
      await chrome.tabs.update(tab.id, { url: action.value });

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.sleep(1000);

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${action.value}`);
      return {
        success: true,
        message: `–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${action.value}`,
        data: {
          url: action.value
        }
      };
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ URL'
      };
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è startAutoPress
  private async executeStartAutoPress(action: IAction): Promise<IActionResult> {
    console.log(`‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: ${action.value}`);
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–± –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
      await this.updateCurrentTab();
      
      if (!this.currentTabId) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞');
      }
      
      if (!action.value || !Array.isArray(action.value)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞');
      }
      const result = await WebInteractions.startAutoPress(this.currentTabId, action.value || []);
      
      if (!result.success) {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞');
      }

      return {
        success: true,
        message: '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω'
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞'
      };
    }
  }

  /**
   * –û–ø—Ä–æ—Å ProxyPilot –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
   * @returns Promise —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ null
   */
  private async checkProxyPilotCommands(): Promise<void> {
    console.log('üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ ProxyPilot');
    
    try {
      const response = await this.fetchProxyPilotCommands();
      
      if (!response) {
        console.log('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ProxyPilot');
        return;
      }

      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', JSON.stringify(response, null, 2));

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥—ã
      if (!this.isValidCommand(response)) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:', response);
        return;
      }

      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ProxyPilot: ${JSON.stringify(response)}`);

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
      const commandResult = await this.executeCommand(response);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', JSON.stringify(commandResult, null, 2));

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ ProxyPilot
      await this.sendCommandResult(response.id, commandResult);

    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥ ProxyPilot:', error);
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥—ã
  private isValidCommand(command: any): boolean {
    console.log('üïµÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã');
    
    if (!command) {
      console.error('‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞');
      return false;
    }

    const requiredFields = ['command', 'id', 'params', 'time_created'];
    for (const field of requiredFields) {
      if (!(field in command)) {
        console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
        return false;
      }
    }

    if (!command.params || !command.params.data) {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã');
      return false;
    }

    for (const action of command.params.data) {
      if (!action.action) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è');
        return false;
      }
    }

    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
    return true;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ ProxyPilot
  private async sendCommandResult(commandId: string, result: IActionResult): Promise<void> {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –≤ ProxyPilot');
    
    try {
      const response = await fetch(`${this.proxyPilotUrl}/command_result`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          command_id: commandId,
          result: result
        })
      });

      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${response.status}`);
      } else {
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
    }
  }

  // –ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã –æ—Ç ProxyPilot
  private async fetchProxyPilotCommands(): Promise<any> {
    try {
      const response = await fetch(`${this.proxyPilotUrl}/get_command`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥—ã: ${response.status}`);
        return null;
      }

      const responseText = await response.text();
      if (!responseText || responseText.trim() === '') {
        console.log('üïê –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç ProxyPilot');
        return null;
      }

      let commandData;
      try {
        commandData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:', responseText);
        return null;
      }
      
      return commandData;
    } catch (error) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–∞–Ω–¥—ã:', error);
      return null;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  private async executeCommand(command: any): Promise<IActionResult> {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command.command}`);
    console.log(`üÜî ID –∫–æ–º–∞–Ω–¥—ã: ${command.id}`);
    console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã:`, JSON.stringify(command.params, null, 2));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
    if (!tabs.length || !tabs[0].id) {
      console.error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏');
      return {
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥'
      };
    }
    this.currentTabId = tabs[0].id;
    console.log(`üåü –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: ${this.currentTabId}`);

    if (!command.params || !command.params.data) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
      return {
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
      };
    }

    const actions = command.params.data;
    console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: ${actions.length}`);

    const results: IActionResult[] = [];

    for (const action of actions) {
      console.log(`üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ${JSON.stringify(action)}`);
      
      try {
        let result: IActionResult;
        switch (action.action) {
          case 'input':
            result = await this.executeInput(action);
            break;
          case 'click':
            result = await this.executeClick(action);
            break;
          case 'scroll':
            result = await this.executeScroll(action);
            break;
          case 'go':
            result = await this.executeGo(action);
            break;
          case 'startAutoPress':
            result = await this.executeStartAutoPress(action);
            break;
          default:
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.action}`);
            result = {
              success: false,
              error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
              message: `–î–µ–π—Å—Ç–≤–∏–µ ${action.action} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`
            };
        }

        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è:`, JSON.stringify(result, null, 2));
        results.push(result);

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await this.sleep(500);

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        if (!result.success) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${action.action}`);
          break;
        }
      } catch (error) {
        console.error(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:`, error);
        results.push({
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è ${action.action}`
        });
        break;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const overallSuccess = results.every(result => result.success);
    
    return {
      success: overallSuccess,
      message: overallSuccess 
        ? '–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' 
        : '–ù–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
      data: {
        commandId: command.id,
        actionResults: results
      }
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ ProxyPilot
   * @param intervalMs –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  startProxyPilotPolling(intervalMs: number = 5000): void {
    const pollProxyPilot = async () => {
      try {
        await this.checkProxyPilotCommands();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ ProxyPilot:', error);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    pollProxyPilot();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å
    setInterval(pollProxyPilot, intervalMs);
  }
}

export default ActionExecutor;
